Including a new TraceSource in CsmaNetDevice to integrate with OpenFlow 1.3

diff -uprN a/src/csma/model/csma-net-device.cc b/src/csma/model/csma-net-device.cc
--- a/src/csma/model/csma-net-device.cc	2016-02-16 15:01:30.000000000 -0200
+++ b/src/csma/model/csma-net-device.cc	2016-02-16 15:03:29.000000000 -0200
@@ -109,6 +109,12 @@ CsmaNetDevice::GetTypeId (void)
                      "This is a promiscuous trace,",
                      MakeTraceSourceAccessor (&CsmaNetDevice::m_macPromiscRxTrace),
                      "ns3::Packet::TracedCallback")
+    .AddTraceSource ("OpenFlowRx", 
+                     "Similar to a promiscuous protocol handler, but using the "
+                     "original packet (with all headers). "
+                     "It was designed to integration with ofswitch13 module.",
+                     MakeTraceSourceAccessor (&CsmaNetDevice::m_openflowRxTrace),
+                     "ns3::ofs::OpenFlowCallback")
     .AddTraceSource ("MacRx", 
                      "A packet has been received by this device, "
                      "has been passed up from the physical layer "
@@ -805,6 +811,13 @@ CsmaNetDevice::Receive (Ptr<Packet> pack
     }
 
   //
+  // When this device is set as an OpenFlow switch port, let's hit the OpenFlow
+  // RX trace source with the original packet (copy), so it can be freely
+  // modified.
+  //
+  m_openflowRxTrace (originalPacket);
+
+  //
   // If this packet is not destined for some other host, it must be for us
   // as either a broadcast, multicast or unicast.  We need to hit the mac
   // packet received trace hook and forward the packet up the stack.
diff -uprN a/src/csma/model/csma-net-device.h b/src/csma/model/csma-net-device.h
--- a/src/csma/model/csma-net-device.h	2016-02-16 15:02:06.000000000 -0200
+++ b/src/csma/model/csma-net-device.h	2016-02-16 15:03:29.000000000 -0200
@@ -558,6 +558,18 @@ private:
   TracedCallback<Ptr<const Packet> > m_macPromiscRxTrace;
 
   /**
+   * This trace source is intended to be used by ofswitch13 OpenFlow module.
+   * The trace source fired for packets successfully received by the device
+   * immediately before being forwarded up to higher layers (at the L2/L3
+   * transition). This is a promiscuous trace, but in contrast to a promiscuous
+   * protocol handler, the packet sent to this trace source also includes the
+   * Ethernet header, which is necessary by OpenFlow pipeline processing. 
+   *
+   * \see class CallBackTraceSource
+   */
+  TracedCallback<Ptr<Packet> > m_openflowRxTrace;
+
+  /**
    * The trace source fired for packets successfully received by the device
    * immediately before being forwarded up to higher layers (at the L2/L3 
    * transition).  This is a non-promiscuous trace.
